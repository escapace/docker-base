#!/usr/bin/env bash
#
# vim: set ft=sh:
#
# @import console/error
# @import console/info
# @import console/warn
# @import lang/exists
# @import lang/required
# @import lang/truth
# @import hashicorp/downloadTerraform
# @import stack/stackAmazonEBS
# @import stack/stackVagrant
# @import path/absolutePath
# @import path/relativePath
# @import stack/terraformInit
# @import stack/terraformValidate

stackTerraform () {
    local module
    
    module="$(absolutePath "${1}")"

    local clean="${2:-true}"
    local code=0

    if _ required "${STACK_CLEAN}"
    then
        clean="${STACK_CLEAN}"
    fi

    downloadTerraform

    exists jq || {
        error "stackTerraform: Cannot find jq"

        return 1
    }

    required "${module}" "${clean}" || {
        error "stackTerraform: ReferenceError - attempt is being made to access a variable that is not defined"

        return 1
    }

    [[ -d "${module}" ]] || {
        error "stackTerraform: No such file or directory"

        return 1
    }

    [[ -d "${module}/tests" ]] || {
        error "stackTerraform: No such file or directory"

        return 1
    }

    [[ -f "${module}/main.tf" ]] || {
        error "stackTerraform: No such file or directory"

        return 1
    }

    while read -d '' -r directory
    do
        for test in "${directory}"/*
        do
            if [[ -f "${test}/main.tf" ]]
            then
                cd "${test}" || return 1

                local short

                short="$(relativePath "${test}" "${MANAGE_REPOSITORY}")"

                info "${short}: running"

                (
                    terraformInit "${test}" || return 1
                    terraformValidate "${test}"  || return 1

                    "${MANAGE_REPOSITORY}/vendor/terraform/terraform" apply \
                        -auto-approve=true \
                        -input=false || return 1
                ) || ((++code))

                local localCode=0

                if truth "${clean}"
                then
                    info "${short}: Destroying build artifacts"

                    cd "${test}" || ((++localCode))

                    "${MANAGE_REPOSITORY}/vendor/terraform/terraform" destroy -force || ((++localCode))

                    if (( localCode == 0 ))
                    then
                        rm -f "${test}/terraform.tfstate" "${test}/terraform.tfstate.backup" || true
                        rm -rf "${test}/.terraform" || true

                        info "${short}: success"
                    else
                        error "${short}: failed to destroy build artifacts"

                        ((++code))
                    fi
                fi
            fi
        done
    done < <(find "${module}/tests" -type d ! -path "*.terraform*" -print0 2> /dev/null)

    return "${code}"
}
