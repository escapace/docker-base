#!/usr/bin/env bash
# @import release/npmSetup
# @import release/npmShouldPublish
# @import console/error
# @import console/info
# @import lang/exists
# @import array/includes
# @import string/kebabCase

npmTravis ()
{
    exists jq || {
        error "Cannot find jq"
        return 1
    }

    local code=0
    local version
    local name
    local versionRegex='v([0-9]+)\.([0-9]+)\.([0-9]+)([\.0-9A-Za-z-]*)?'

    version="$(jq -r '.version // empty' < "${MANAGE_REPOSITORY}/package.json")"
    name="$(jq -r '.name // empty' < "${MANAGE_REPOSITORY}/package.json")"

    if [[ -n "${TRAVIS_TAG}"                    ]] &&
       [[ "${TRAVIS_TAG}" =~ ^${versionRegex}$  ]] &&
       [[ "${TRAVIS_SECURE_ENV_VARS}" == "true" ]] &&
       [[ -n "${NPM_TOKEN}"                     ]] &&
       [[ "v${version}" == "${TRAVIS_TAG}"      ]]
    then
        npm run test:travis || {
            error "Failed on 'npm run test:travis'"
            ((code++))
        }

        if (( code == 0 ))
        then
            npm run build || {
                error "Failed on 'npm run build'"
                ((code++))
            }
        fi

        if (( code == 0 ))
        then
            npmSetup

            if npmShouldPublish "${name}" "${version}"
            then
                npm publish --access public
                info "Published package ${name}@${version}"
            fi
        fi
    elif [[ "${TRAVIS_PULL_REQUEST}" == "false" ]] &&
         [[ "${TRAVIS_SECURE_ENV_VARS}" == "true" ]] &&
         [[ -n "${NPM_TOKEN}" ]] &&
         [[ -n "${TRAVIS_COMMIT}" ]]
    then
        local branches
        local tag
        local email

        [ -z "${NPM_PUBLISH_BRANCHES}" ] && NPM_PUBLISH_BRANCHES="master"

        IFS=$'\n ' read -r -a branches <<< "${NPM_PUBLISH_BRANCHES}"

        npm run test:travis || {
            error "Failed on 'npm run test:travis'"
            ((code++))
        }

        if (( code == 0 ))
        then
            npm run build || {
                error "Failed on 'npm run build'"
                ((code++))
            }
        fi

        email="$(git log -1 "${TRAVIS_COMMIT}" --pretty="%aE")"

        if includes branches "${TRAVIS_BRANCH}" &&
           (( code == 0 )) &&
           [[ "${email}" != "bot@renovateapp.com" ]] &&
           [[ "${email}" != "renovate[bot]@users.noreply.github.com" ]]
        then
            tag="$(kebabCase "${TRAVIS_BRANCH}")"
            npmSetup

            npm --no-git-tag-version version minor
            version="$(jq -r '.version // empty' < "${MANAGE_REPOSITORY}/package.json")"

            version="${version}-${tag}.${TRAVIS_COMMIT:0:8}"

            npm --no-git-tag-version version "${version}"

            if npmShouldPublish "${name}" "${version}"
            then
                npm publish --access public --tag "${tag}"
                info "Published package ${name}@${version}"
            fi
        fi
    else
        npm run test:travis || {
            error "Failed on 'npm run test:travis'"
            ((code++))
        }

        if (( code == 0 ))
        then
            npm run build || {
                error "Failed on 'npm run build'"
                ((code++))
            }
        fi
    fi

    return "${code}"
}
