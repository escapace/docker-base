#!/usr/bin/env bash
# @import lang/required
# @import console/error

function npmCommit () {
    local tag="$1"
    local version
    local code=0

    required "${tag}" || {
        error "specify a version"
        ((code++))
    }

    required "${GIT_USER_NAME}" || {
        error "Set the 'GIT_USER_NAME' environment variable"
        ((code++))
    }
    required "${GIT_USER_EMAIL}" || {
        error "Set the 'GIT_USER_EMAIL' environment variable"
        ((code++))
    }
    required "${GIT_USER_SIGNINGKEY}" || {
        error "Set the 'GIT_USER_SIGNINGKEY' environment variable"
        ((code++))
    }

    local versionRegex="([0-9]+)\.([0-9]+)\.([0-9]+)([\.0-9A-Za-z-]*)?"

    if [[ "${tag}" =~ ^${versionRegex}$ ]]
    then
        true
    else
        error "Invalid version"
        ((code++))
    fi

    local message="chore(release): publish v${tag}"

    {
        git diff --exit-code &&
        git diff --cached --exit-code
    } > /dev/null ||  {
        error "Working tree is not clean"
        ((code++))
    }

    version="$(jq -r '.version // empty' < "${MANAGE_REPOSITORY}/package.json")"

    if [[ "${tag}" == "${version}" ]] &&
       (( code == 0 ))
    then
        true
    else
        local version="${tag}"
        local tmp

        tmp="$(jq -r ".version = \"${version}\" // empty" < "${MANAGE_REPOSITORY}/package.json")"

        echo "${tmp}" > "${MANAGE_REPOSITORY}/package.json"
    fi

    if (( code == 0 ))
    then
        local prerelease

        prerelease="$(jq -r '.scripts | .prerelease // empty' < 'package.json' )"

        if _ required "${prerelease}"
        then
            npm run prerelease || {
                ((code++))
            }
        fi
    fi

    if (( code == 0 ))
    then
        (
            git config user.name "${GIT_USER_NAME}"
            git config user.email "${GIT_USER_EMAIL}"
            git config user.signingkey "${GIT_USER_SIGNINGKEY}"

            {
                git diff --exit-code &&
                git diff --cached --exit-code
            } > /dev/null ||  {
                git add "${MANAGE_REPOSITORY}/package.json"

                git commit --no-verify -n -q --gpg-sign="${GIT_USER_SIGNINGKEY}" -m "${message}"
            }

            git push --no-verify origin :"v${tag}" &> /dev/null || true
            git tag -d "v${tag}" &> /dev/null || true
            git tag -m "v${tag}" -s "v${tag}"

            git push --no-verify --quiet --follow-tags
        ) || ((code++))
    else
        git checkout -q "${MANAGE_REPOSITORY}/package.json"
    fi

    {
        git config --unset user.name
        git config --unset user.email
        git config --unset user.signingkey
    } &> /dev/null || true

    return "${code}"
}
