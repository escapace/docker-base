#!/usr/bin/env manage
#
# vim: set ft=sh:
#
# <doc>
#
# Build centos docker image
#
# </doc>
#
# <import>
#
# collection-shell
# collection-message
# collection-string
# collection-tag
# collection-array
# collection-yaml
#
# </import>
#
# <dependency>
#
# bash
# docker
#
# </dependency>

joinLines()
{
    #
    # Joins lines from stdin into a string.
    #
    # DELIMITER defaults to ", ".
    #
    # Usage: _joinLines [DELIMITER]
    #
    # Usage examples:
    #     echo -e "foo\nbar\nbaz" | _joinLines      #==> foo, bar, baz
    #     echo -e "foo\nbar\nbaz" | _joinLines "|"  #==> foo|bar|baz
    #

    local delim=${1:-, }

    while read -r; do
        echo -ne "${REPLY}${delim}"
    done | sed "s=$delim$=="
    echo
}

indent () {
    local line

    while read -r line
    do
        echo "... ${line}"
    done
}

rootfs () {
    local image="$1"
    local name="$2"

    local directory

    directory="$(dirname "${image}")"

    if [[ "${image}" =~ \.img\.xz$ ]]
    then
        if [ ! -f "${directory}/image-${name}" ]
        then
            # shellcheck disable=SC2002
            cat "${image}" | unxz > "${directory}/image-${name}"
            _ info "extracted image-${name}"
        fi

        if [ ! -f "${directory}/rootfs-${name}" ]; then
            virt-tar-out -a "${directory}/image-${name}" / - > "${directory}/rootfs-${name}"
            _ info "extracted roots-${name}"
        fi
    else
        if [ ! -f "${directory}/rootfs-${name}" ]; then
            virt-tar-out -a "${image}" / - > "${directory}/rootfs-${name}"
            _ info "extracted roots-${name}"
        fi
    fi
}

process () {
    local repository="$1"
    local configuration="$2"
    local directory url arch sha256sum kickstart \
          version tags name filename extension \
          image target logfile builddate tmpImage \
          dockerfile


    directory="$(dirname "${configuration}")"

    eval "$(_ yaml "${configuration}" yml)"

    url="$(yml url)"
    arch="$(yml arch)"
    qemu_arch="$(yml qemu_arch)"
    sha256sum="$(yml sha256sum)"
    kickstart="$(yml kickstart)"
    kickstart="${directory}/${kickstart}"
    version="$(yml version)"
    tags="$(yml tags)"
    name="$(basename "${repository}")-${version}-${arch}"
    builddate=$(date +%Y%m%d)
    filename="${url##*/}"
    target="${directory}/files/${name}"
    extension="${filename#*.}"
    logfile="/tmp/${name}-${builddate}.log"
    image="${target}/image-${name}.${extension}"
    tmpImage="/tmp/images/${name}/$(basename "${image}")"
    dockerfile="${target}/Dockerfile"

    mkdir -p "${target}" "/tmp/images/${name}"
    manage _download "${image}" "${url}" "${sha256sum}"

    sudo chown "${USER}:${USER}" "${image}"
    sudo chmod 644 "${image}"

    sudo cp "${image}" "/tmp/images/${name}/$(basename "${image}")"

    sudo chown root:root "/tmp/images" "/tmp/images/${name}" "${tmpImage}"
    sudo chmod 775 "/tmp/images" "/tmp/images/${name}"
    sudo chmod 644 "${tmpImage}"

    # Build the rootfs
    [ ! -f "/var/tmp/$name-docker.tar.xz" ] && time sudo livemedia-creator \
        --logfile="${logfile}" \
        --make-tar \
        --ks "${kickstart}" \
        --image-name="$name-docker.tar.xz" \
        --iso "${tmpImage}" \
        --arch "${qemu_arch}"

    sudo rm -f "${tmpImage}" || true

    # Put the rootfs someplace
    [ -f "/var/tmp/$name-docker.tar.xz" ] && \
        sudo chown "${USER}:${USER}" "/var/tmp/$name-docker.tar.xz" && \
        mv "/var/tmp/$name-docker.tar.xz" "${target}"

    # Create a Dockerfile to go along with the rootfs.

    [ ! -f "${dockerfile}" ] && cat <<- EOF > "${dockerfile}"
	FROM scratch
	MAINTAINER "${DOCKER_MAINTAINER}"
	ADD $name-docker.tar.xz /

	LABEL name="CentOS Base Image" \\
	vendor="CentOS" \\
	license="GPLv2" \\
	build-date="$builddate"

	CMD ["/bin/bash"]
	EOF

    local suffix prefix cmd
    prefix="-t ${DOCKER_USERNAME}/${repository}:"
    suffix="-f ${dockerfile} ${target}"
    cmd="$(_ join tags | joinLines " ${prefix}")"
    cmd="docker build --force-rm ${prefix}${cmd} ${suffix}"

    # TODO: add docker build --squash when it lands
    _ execute "${cmd}" | indent

    echo
    echo "CentOS docker image has been successfully buit"
    echo
    echo docker push "epiloque/${repository}"
}

validate () {
    local packages element

    packages=( lorax libvirt virt-install qemu-kvm )

    for element in "${packages[@]}"
    do
        if ! rpm -q --whatprovides "${element}" > /dev/null 2>&1
        then
            _ die "rpm $element missing"
        fi
    done

    # test for active libvirtd
    if ! systemctl is-active libvirtd > /dev/null 2>&1
    then
        _ die "libvirtd must be running"
    fi
}

main () {
    verbose true
    strict true

    validate

    # local username=epiloque
    local choice="$1"

    local directory="${MANAGEREPOSITORY}/images/centos"

    local repository
    repository="$(basename "${directory}")"
    cd "${directory}" || _ die "${directory} does not exist"

    if _ required "${choice}"
    then
        configuration="${directory}/${choice}.yml"

        if [[ -f "${configuration}" ]]
        then
            process "${repository}" "${configuration}"
        else
            _ die " No such file or directory: ${configuration}"
        fi
    else
        echo -e 'Avaiable configurations: \n'

        for configuration in "${directory}"/*.yml
        do
            local name
            name="$(basename "${configuration}")"
            name="${name%.*}"

            echo -e " ${name}"
            # if [[ -f "${configuration}" ]]
            # then
            #     process "${repository}" "${configuration}"
            # fi
        done
        echo && exit
    fi
}

onexit ()
{
    if (( $1 == 0 ))
    then
        _ warn "Exiting."
    else
        _ error "An error with exit code \"$1\" has occured."
    fi

    [[ -d '/tmp/images' ]] && sudo rm -rf /tmp/images
}
