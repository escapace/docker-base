#!/usr/bin/env bash
#
# vim: set ft=sh:
#
# <doc>
#
# docker-base
#
# </doc>
#
# <import>
#
# collection-shell
# collection-message
# collection-string
#
# </import>

indent () {
    local line

    while read -r line
    do
        echo "......... ${line}"
    done
}

main ()
{
    verbose true
    strict true

    _ required "$1" || _ die 'Nothing to do'
    [ -f "${MANAGEREPOSITORY}/scripts/build-$1" ] || _ die "script $1 does not exist"

    name=$1

    ARCH="$(manage _arch)"

    [[ -z "${MANAGEDOCKERFILE}" ]] && MANAGEDOCKERFILE="${MANAGEREPOSITORY}/images/generic/Dockerfile.${ARCH}"

    docker build -t "epiloque/docker-base-${name}:latest" \
        -f "${MANAGEDOCKERFILE}" \
        "${MANAGEREPOSITORY}" #> /dev/null

    local data="epiloque-docker-base-data-${name}"

    mkdir -p "${MANAGEREPOSITORY}/release/${name}"

    if ! docker inspect "${data}" > /dev/null 2>&1; then
        docker create -v /volume \
            --name "${data}" \
            --entrypoint "/bin/true" \
            "epiloque/docker-base-${name}:latest"
    fi

    _ info "Processing \"${name}\" ..."

    docker run --volumes-from "${data}" \
        "epiloque/docker-base-${name}:latest" build-"${name}"

    docker run --rm --volumes-from "${data}" \
        -v "${MANAGEREPOSITORY}/release/${name}":/release \
        "epiloque/docker-base-${name}:latest" _copy "${name}"
}

onexit ()
{
    if (( $1 == 0 ))
    then
        docker rmi -f "epiloque/docker-base-${name}:latest" || true
    else
        _ error "buid_docker: An error with exit code \"$1\" has occured."
    fi
}
